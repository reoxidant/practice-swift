import UIKit

//: # Урок 4. Типы коллекций
//: ## Массивы
//: > Хранят в себе упорядоченные, но при этом не уникальные значения одного типа
// 41 мин не понял, что чувак хотел сказать из жизни пример с коллекцией и кока колой

let strings = ["a", "b", "c"] // Неизменяемый массив с типом данных String
let strings1:[String] = ["dd", "syhud"]

// получение элемента

strings[0]
strings[2]

// strings[67] - ошибка нет такого индекса

//Обьявление пустого массива с String
let strings2 = [String]()
let strings4 = Array<String>()

let string4 = Array<Int>() // Пустой массив с типом Int

var integers = [Int]()

integers = [4, 75, 89]// Присваивание данных массиву

integers = [4, 8] // Теперь наш массив имеет другие данные

// 48 мин

integers += [4788, 8778] // Добавление новых значений к уже существующим

integers += [4] // Добавление новых значений к уже существующим

// 49 мин

integers.append(5)// Добавление нового значения при помощи метода append

integers.insert(10, at: 0) // Добавление нового элемента по индексу

integers.insert(5, at: 1)

// 54 мин

var array3 = integers + [87,478,74]

//Удаление последнего элемента из массива и сохранение его в константе

var lastValue = integers.removeLast()

//Результат после удаления последнего элемента

integers

//Удаление первого элемента из массива и сохранение его в константе

var firstValue = integers.removeFirst()

// Результат после удаления первого элемента

integers

// 58 мин

// Удаление значения по индексу

integers.remove(at: 1)

// Результат после удаления значение по индексу

integers

// Количество элементов массива

integers.count

// 1 ч 03 мин

// Удаление всех элементов массива

integers.removeAll()


// Обнуление массива путём присваивания ему пустого массиву

integers = []

// Замена значения по индексу 2 на новое значение

integers[2] = 999
integers[0] += 1

// Результат после замены

integers
//: ### Использование логического свойства isEmpty
if integers.isEmpty {
    print("пустой")
} else {
    print("не пустой")
}
//: [Next](@next)
