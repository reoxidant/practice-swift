//: A UIKit based Playground for presenting user interface
  
import UIKit
import PlaygroundSupport

//: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å "–≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ" background tasks, –∫–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞ –Ω–∞ Playground –±—É–¥–µ—Ç –∑–∞–∫–æ–Ω—á–µ–Ω–∞.

PlaygroundPage.current.needsIndefiniteExecution = true

//1. –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è (serial) main queue

let mainQueue = DispatchQueue.main

//2. –ì–ª–æ–±–∞–ª—å–Ω–∞—è concurrent dispatch queues

let userInteractiveQueue = DispatchQueue.global(qos: .userInteractive)
let userQueue = DispatchQueue.global(qos: .userInitiated)
let utilityQueue = DispatchQueue.global(qos: .utility)
let backgroundQueue = DispatchQueue.global(qos: .background)

//==== –ì–ª–æ–±–∞–ª—å–Ω–∞—è concurrent .default dispatch queue ====

let defaultQueue = DispatchQueue.global() // .default

// –ó–∞–¥–∞–Ω–∏—è:

func task(_ symbol: String) {
    for i in 1...10 {
        print("\(symbol) \(i) –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç = \(qos_class_self().rawValue)")
    }
}

func taskHIGH(_ symbol: String) {
    print("\(symbol) HIGH –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç = \(qos_class_self().rawValue)")
}

// –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å –∏ –∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å

print("--------------------------")
print("----–°–ò–ù–•–†–û–ù–ù–û–°–¢–¨ sync----")
print("----Global .concurrent Q1 - .userInitiated----")
print("--------------------------")

userQueue.sync {
    task("üòÄ")
}
task("üòà")
sleep(2)

print("--------------------------")
print("----–ê–°–ò–ù–•–†–û–ù–ù–û–°–¢–¨ async----")
print("----Global .concurrent Q1 - .userInitiated----")
print("--------------------------")
userQueue.async {
    task("üòÄ")
}
task("üòà")

// –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å mySerialQueue

let mySerialQueue = DispatchQueue(label: "com.vshapovalov.mySerial")

print("--------------------------")
print("----–°–ò–ù–•–†–û–ù–ù–û–°–¢–¨ sync----")
print("----Private .serial Q1 - no----")
print("--------------------------")

mySerialQueue.sync {
    task("üòÄ")
}
task("üòà")

print("--------------------------")
print("----–ê–°–ò–ù–•–†–û–ù–ù–û–°–¢–¨ async----")
print("----Private .serial Q1 - no----")
print("--------------------------")

mySerialQueue.async {
    task("üòÄ")
}
task("üòà")
sleep(1)

// –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º

print("--------------------------")
print("----Private .serial Q1 - .userInitiated----")
print("--------------------------")

let serialPriorityQueue = DispatchQueue(label: "com.vshapovalov.serialPriority", qos: .userInitiated)
serialPriorityQueue.async {
    task("üòÄ")
}
serialPriorityQueue.async {
    task("üòà")
}
sleep(1)

// –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏

print("--------------------------")
print("----Private .serial Q1 - .userInitiated----")
print("------------------- Q2 - .background-------")
print("--------------------------")

let serialPriorityQueue1 = DispatchQueue(label: "com.vshapovalov.serialPriority", qos: .userInitiated)
let serialPriorityQueue2 = DispatchQueue(label: "com.vshapovalov.serialPriority", qos: .background)
serialPriorityQueue2.async {
    task("üòÄ")
}
serialPriorityQueue1.async {
    task("üòà")
}
sleep(1)

// asyncAfter —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞

print("-------------------------------------------")
print("----asyncAfter (.userInteractive) –Ω–∞ Q2----")
print("----Private .serial Q1 - .utility----")
print("------------------- Q2 - .background-------")
print("-------------------------------------------")

let serialUtilityQueue = DispatchQueue(label: "com.vshapovalov.serialUtilityPriority", qos: .utility)
let serialBackgroundQueue = DispatchQueue(label: "com.vshapovalov.serialBackgroundPriority", qos: .background)

serialBackgroundQueue.asyncAfter(deadline: .now() + 0.1, qos: .userInteractive) {
    task("üòà")
}
serialUtilityQueue.async {
    task("üòÄ")
}
sleep(1)

// –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ Private –æ—á–µ—Ä–µ–¥—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º

print("-------------------------------------------")
print("Private .concurrent Q - .userInitiated")
print("-------------------------------------------")

let workerQueue = DispatchQueue(label: "com.vshapovalov.worker_concurrent", qos: .userInitiated, attributes: .concurrent)
workerQueue.async {
    task("üòÄ")
}
workerQueue.async {
    task("üòà")
}
sleep(2)


// –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ Private –æ—á–µ—Ä–µ–¥–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏

print("-------------------------------------------")
print("--------.concurrent Q1 - .utility----")
print("------------------- Q2 - .background-------")
print("-------------------------------------------")

let workerQueue1 = DispatchQueue(label: "com.vshapovalov.worker_concurrent1", qos: .userInitiated, attributes: .concurrent)
let workerQueue2 = DispatchQueue(label: "com.vshapovalov.worker_concurrent1", qos: .background, attributes: .concurrent)

workerQueue2.async {
    task("üòÄ")
}

workerQueue1.async {
    task("üòà")
}

sleep(1)

// –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º

print("-------------------------------------------")
print(" –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º")
print(" Private .concurrent Q - .userInitiated .initiallyInactive")
print("-------------------------------------------")


let workerDelayQueue = DispatchQueue(label: "com.vshapovalov.worker_concurrent", qos: .userInitiated, attributes: [.concurrent, .initiallyInactive])

workerDelayQueue.async {
    task("üòÄ")
}

workerDelayQueue.async {
    task("üòà")
}

sleep(1)

print("-------------------------------------------")
print(" –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª–ª—å–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏")
print(" —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º")
print("-------------------------------------------")
workerDelayQueue.activate()
sleep(1)
